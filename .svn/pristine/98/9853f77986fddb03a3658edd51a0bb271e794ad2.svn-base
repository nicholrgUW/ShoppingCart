// Finish and comment me!

package model;

import java.math.BigDecimal;
import java.util.Objects;
/**
 * @author Robbie Nichols eibbor08@uw.edu
 * @version Autumn 2014
 */
public final class Item {
    /** Name of the Item. */
    private final String myName;
    /** Standard price of the Item. */
    private final BigDecimal myPrice;
    /** Bulk price of the Item. */
    private final BigDecimal myBulkPrice;
    /**
     * Bulk quantity of the Item. This is the quantity of the Item at which the 
     * discounted bulk price is applied.
     */
    private final int myBulkQuantity;
    
    /**
     * 
     * @param theName   The name of the Item.
     * @param thePrice  The standard price of the Item.
     */
    public Item(final String theName, final BigDecimal thePrice) {
        myName = theName;
        myPrice = thePrice;
        //set other fields to 0 to make other methods simpler?
        myBulkQuantity = -1;    //if removed, will break calculateItemTotal
        myBulkPrice = new BigDecimal(-1);
    }

    /**
     * 
     * @param theName           The name of the Item.
     * @param thePrice          The standard price for a single Item.
     * @param theBulkQuantity   Quantity at which bulk pricing is introduced.
     * @param theBulkPrice      Discounted bulk price.
     */
    public Item(final String theName, final BigDecimal thePrice, final int theBulkQuantity,
                final BigDecimal theBulkPrice) {
        myName = theName;
        myPrice = thePrice;
        myBulkQuantity = theBulkQuantity;
        myBulkPrice = theBulkPrice;
    }

    /**
     * 
     * @param theQuantity The quantity of Items to price out.
     * @return Returns the total price, applying bulk discount if applicable.
     */
    public BigDecimal calculateItemTotal(final int theQuantity) {
        // change parameter to construct BigDecimal?
        BigDecimal returnTotal;
        if (this.myBulkQuantity == -1) {
            returnTotal = new BigDecimal(this.myPrice.multiply(new BigDecimal(theQuantity)).
                                         toString());
        } else {
            final BigDecimal[] mixedQuantity =  new BigDecimal(theQuantity).
                            divideAndRemainder(new BigDecimal(this.myBulkQuantity));
        // [0] = bulk total, [1] = remainder (full priced), found in Java API
            returnTotal = new BigDecimal(mixedQuantity[0].multiply(this.myBulkPrice).
                add(mixedQuantity[1].multiply(this.myPrice)).toString());
        }
        return returnTotal;
    }
    /**
     * Returns a String representation of the the Item's name, Price, and BulkQuantity pricing.
     * 
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        //need string
        final String returnString;
        if (this.myBulkQuantity == -1) {
            returnString = this.myName + ", $" + this.myPrice.toString();
        } else {
            returnString = this.myName + ", $" + this.myPrice.toString() + " ("
                                            + this.myBulkQuantity + " for $"
                                            + this.myBulkPrice.toString() + ")";
        }
        return returnString;
    }

    /**
     * Returns true if the object being compared has the same values and name.
     * 
     * {@inheritDoc}
     */
    @Override
    public boolean equals(final Object theOther) { //attempt 1 -- not done
        boolean equalsFlag = false;
        if (this == theOther) {
            equalsFlag = true;
        } else if (theOther != null && this.getClass() == theOther.getClass() 
                        && this.toString().equals(theOther.toString())) {
            equalsFlag = true;
        } 
        return equalsFlag;
    }


    @Override
    public int hashCode() {
        return 11 * Objects.hashCode(this.myName) + 13 * this.myPrice.intValue() 
                        + 15 * this.myBulkPrice.intValue() + 17 * this.myBulkQuantity;
    }

}
